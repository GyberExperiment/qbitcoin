/**
 * –¢–ï–°–¢ COMPRESSED QUANTUM KEYS –° DILITHIUM AGGREGATION
 * 
 * –ü–æ–ª–Ω—ã–π production test –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã:
 * - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö ECDSA+Dilithium –∫–ª—é—á–µ–π –∏–∑ seed
 * - –°–æ–∑–¥–∞–Ω–∏–µ bc1q... –∞–¥—Ä–µ—Å–æ–≤ 
 * - –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å witness
 * - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 */

#include <iostream>
#include <vector>
#include <chrono>
#include <iomanip>

#include "src/compressed_quantum_keys.h"
#include "src/random.h"
#include "src/util/time.h"
#include "src/logging.h"

/**
 * Comprehensive —Ç–µ—Å—Ç production —Å–∏—Å—Ç–µ–º—ã
 */
class CompressedQuantumKeysTest {
private:
    CQuantumWalletManager wallet;
    std::vector<CQuantumKeyPair> test_keypairs;
    
public:
    bool RunFullSystemTest() {
        std::cout << "üöÄ –ë–û–ï–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï COMPRESSED QUANTUM KEYS + DILITHIUM AGGREGATION\n" << std::endl;
        
        // Test 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        if (!TestKeyPairGeneration()) {
            return false;
        }
        
        // Test 2: –ê–¥—Ä–µ—Å–∞ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Bitcoin  
        if (!TestAddressGeneration()) {
            return false;
        }
        
        // Test 3: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω–∞—è –¥–µ—Ä–∏–≤–∞—Ü–∏—è
        if (!TestKeyDerivation()) {
            return false;
        }
        
        // Test 4: Quantum witness serialization
        if (!TestQuantumWitness()) {
            return false;
        }
        
        // Test 5: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (!TestAggregatedTransactions()) {
            return false;
        }
        
        // Test 6: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (!TestTransactionValidation()) {
            return false;
        }
        
        // Test 7: –ö–æ—à–µ–ª–µ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä
        if (!TestWalletManager()) {
            return false;
        }
        
        // Test 8: Performance –∏ —ç–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞
        if (!TestPerformanceAndSavings()) {
            return false;
        }
        
        std::cout << "\nüéâ –í–°–ï –ë–û–ï–í–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! PRODUCTION –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ë–û–Æ!" << std::endl;
        return true;
    }
    
private:
    bool TestKeyPairGeneration() {
        std::cout << "üîß Test 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö ECDSA+Dilithium –∫–ª—é—á–µ–π..." << std::endl;
        
        // –¢–µ—Å—Ç 1.1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ seed
        unsigned char test_seed[32];
        GetStrongRandBytes(std::span<unsigned char>(test_seed, 32));
        
        CQuantumKeyPair keypair1 = CQuantumKeyPair::FromSeed(test_seed);
        if (!keypair1.IsValid()) {
            std::cout << "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã –∏–∑ seed" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 1.2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–∏ —Å–≤—è–∑–∞–Ω—ã
        CQuantumKeyPair keypair2 = CQuantumKeyPair::FromSeed(test_seed);
        if (!keypair2.IsValid()) {
            std::cout << "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–π –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã –∏–∑ seed" << std::endl;
            return false;
        }
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        std::cout << "üîç Debug: keypair1 address hash: " << keypair1.GetAddressHash().ToString() << std::endl;
        std::cout << "üîç Debug: keypair2 address hash: " << keypair2.GetAddressHash().ToString() << std::endl;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ECDSA –∫–ª—é—á–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        CPubKey ecdsa1 = keypair1.GetECDSAPubKey();
        CPubKey ecdsa2 = keypair2.GetECDSAPubKey();
        std::cout << "üîç Debug: ECDSA –∫–ª—é—á–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ: " << (ecdsa1 == ecdsa2 ? "–î–ê" : "–ù–ï–¢") << std::endl;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Dilithium –∫–ª—é—á–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        CQPubKey dil1 = keypair1.GetDilithiumPubKey();
        CQPubKey dil2 = keypair2.GetDilithiumPubKey();
        std::cout << "üîç Debug: Dilithium –∫–ª—é—á–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ: " << (dil1 == dil2 ? "–î–ê" : "–ù–ï–¢") << std::endl;
        
        if (keypair1.GetAddressHash() != keypair2.GetAddressHash()) {
            std::cout << "‚ùå –ö–ª—é—á–∏ –Ω–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω—ã" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 1.3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ —Ç–∏–ø–∞ –∫–ª—é—á–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç
        uint256 test_message;
        GetStrongRandBytes(std::span<unsigned char>(test_message.begin(), 32));
        
        std::vector<unsigned char> ecdsa_sig;
        if (!keypair1.SignECDSA(test_message, ecdsa_sig)) {
            std::cout << "‚ùå ECDSA –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" << std::endl;
            return false;
        }
        
        std::vector<unsigned char> dilithium_sig;
        if (!keypair1.SignDilithium(test_message, dilithium_sig)) {
            std::cout << "‚ùå Dilithium –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 1.4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–µ–π
        if (!keypair1.VerifyECDSA(test_message, ecdsa_sig)) {
            std::cout << "‚ùå ECDSA –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" << std::endl;
            return false;
        }
        
        if (!keypair1.VerifyDilithium(test_message, dilithium_sig)) {
            std::cout << "‚ùå Dilithium –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" << std::endl;
            return false;
        }
        
        test_keypairs.push_back(keypair1);
        
        std::cout << "‚úÖ –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏: ECDSA (" << ecdsa_sig.size() 
                  << " bytes) + Dilithium (" << dilithium_sig.size() << " bytes)" << std::endl;
        
        return true;
    }
    
    bool TestAddressGeneration() {
        std::cout << "\nüîß Test 2: –ê–¥—Ä–µ—Å–∞ bc1q... –∏–∑ Hash160(dilithium_pubkey)..." << std::endl;
        
        if (test_keypairs.empty()) {
            std::cout << "‚ùå –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" << std::endl;
            return false;
        }
        
        const CQuantumKeyPair& keypair = test_keypairs[0];
        
        // –¢–µ—Å—Ç 2.1: –°–æ–∑–¥–∞–Ω–∏–µ bech32 –∞–¥—Ä–µ—Å–∞
        std::string address = keypair.GetAddress();
        if (address.empty() || address.substr(0, 3) != "bc1") {
            std::cout << "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: " << address << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 2.2: –ü–∞—Ä—Å–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ
        uint160 parsed_hash;
        std::string hrp;
        if (!QuantumAddressUtils::ParseBech32Address(address, parsed_hash, hrp)) {
            std::cout << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∞–¥—Ä–µ—Å" << std::endl;
            return false;
        }
        
        if (parsed_hash != keypair.GetAddressHash()) {
            std::cout << "‚ùå Hash –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 2.3: –°–æ–∑–¥–∞–Ω–∏–µ P2WPKH script
        CScript script = QuantumAddressUtils::CreateP2WPKHScript(keypair.GetAddressHash());
        if (!QuantumAddressUtils::IsQuantumAddress(script)) {
            std::cout << "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π P2WPKH script" << std::endl;
            return false;
        }
        
        std::cout << "‚úÖ –ê–¥—Ä–µ—Å: " << address << std::endl;
        std::cout << "‚úÖ Script size: " << script.size() << " bytes (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π P2WPKH)" << std::endl;
        
        return true;
    }
    
    bool TestKeyDerivation() {
        std::cout << "\nüîß Test 3: BIP32-style –¥–µ—Ä–∏–≤–∞—Ü–∏—è quantum –∫–ª—é—á–µ–π..." << std::endl;
        
        if (test_keypairs.empty()) {
            return false;
        }
        
        const CQuantumKeyPair& parent = test_keypairs[0];
        
        // –¢–µ—Å—Ç 3.1: –î–µ—Ä–∏–≤–∞—Ü–∏—è child –∫–ª—é—á–µ–π
        CQuantumKeyPair child1, child2;
        if (!parent.Derive(child1, 0) || !parent.Derive(child2, 1)) {
            std::cout << "‚ùå –î–µ—Ä–∏–≤–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 3.2: Child –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏
        if (child1.GetAddressHash() == child2.GetAddressHash()) {
            std::cout << "‚ùå Child –∫–ª—é—á–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 3.3: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –¥–µ—Ä–∏–≤–∞—Ü–∏–∏
        CQuantumKeyPair child1_again;
        if (!parent.Derive(child1_again, 0)) {
            std::cout << "‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–µ—Ä–∏–≤–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å" << std::endl;
            return false;
        }
        
        if (child1.GetAddressHash() != child1_again.GetAddressHash()) {
            std::cout << "‚ùå –î–µ—Ä–∏–≤–∞—Ü–∏—è –Ω–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω–∞" << std::endl;
            return false;
        }
        
        test_keypairs.push_back(child1);
        test_keypairs.push_back(child2);
        
        std::cout << "‚úÖ –î–µ—Ä–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–∏: " << child1.GetAddress() 
                  << " –∏ " << child2.GetAddress() << std::endl;
        
        return true;
    }
    
    bool TestQuantumWitness() {
        std::cout << "\nüîß Test 4: Quantum witness serialization..." << std::endl;
        
        if (test_keypairs.size() < 3) {
            std::cout << "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 4.1: –°–æ–∑–¥–∞–Ω–∏–µ quantum witness
        CQuantumWitness witness;
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å
        CAggregatedSignature agg_sig;
        agg_sig.sig_count = 3;
        
        uint256 test_hash;
        GetStrongRandBytes(std::span<unsigned char>(test_hash.begin(), 32));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ keypairs
        for (size_t i = 0; i < 3; ++i) {
            agg_sig.message_hashes.push_back(test_hash);
            agg_sig.pubkeys.push_back(test_keypairs[i].GetDilithiumPubKey());
            
            witness.pubkeys.push_back(test_keypairs[i].GetDilithiumPubKey());
            witness.address_hashes.push_back(test_keypairs[i].GetAddressHash());
        }
        
        // –°–æ–∑–¥–∞–µ–º mock aggregated signature
        agg_sig.agg_signature.resize(3309); // Standard Dilithium signature size
        GetStrongRandBytes(std::span<unsigned char>(agg_sig.agg_signature.data(), 3309));
        
        witness.agg_signature = agg_sig;
        witness.input_count = 3;
        
        // –¢–µ—Å—Ç 4.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ witness
        if (!witness.IsValid()) {
            std::cout << "‚ùå Witness –Ω–µ –≤–∞–ª–∏–¥–µ–Ω" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 4.3: –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ scriptWitness
        CScriptWitness script_witness = witness.ToScriptWitness();
        if (script_witness.stack.size() != 4) {
            std::cout << "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ scriptWitness: " << script_witness.stack.size() << " —ç–ª–µ–º–µ–Ω—Ç–æ–≤" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 4.4: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ
        CQuantumWitness witness_restored;
        if (!witness_restored.FromScriptWitness(script_witness)) {
            std::cout << "‚ùå –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 4.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        if (witness_restored.input_count != witness.input_count ||
            witness_restored.pubkeys.size() != witness.pubkeys.size()) {
            std::cout << "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏" << std::endl;
            return false;
        }
        
        std::cout << "‚úÖ Quantum witness: " << witness.GetSize() 
                  << " bytes –¥–ª—è " << witness.input_count << " –≤—Ö–æ–¥–æ–≤" << std::endl;
        
        return true;
    }
    
    bool TestAggregatedTransactions() {
        std::cout << "\nüîß Test 5: –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–µ–≤—ã—Ö –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π..." << std::endl;
        
        if (test_keypairs.size() < 3) {
            return false;
        }
        
        // –¢–µ—Å—Ç 5.1: –°–æ–∑–¥–∞–Ω–∏–µ transaction builder
        CQuantumTransactionBuilder builder;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ö–æ–¥—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        for (size_t i = 0; i < 3; ++i) {
            COutPoint outpoint;
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π hash –¥–ª—è transaction ID
            uint256 txid_raw;
            GetStrongRandBytes(std::span<unsigned char>(txid_raw.begin(), 32));
            outpoint.hash = Txid::FromUint256(txid_raw);
            outpoint.n = i;
            
            if (!builder.AddInput(outpoint, test_keypairs[i], 100000 * (i + 1))) {
                std::cout << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Ö–æ–¥ " << i << std::endl;
                return false;
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ö–æ–¥—ã
        if (!builder.AddOutput(test_keypairs[0].GetAddressHash(), 150000) ||
            !builder.AddOutput(test_keypairs[1].GetAddressHash(), 100000)) {
            std::cout << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥—ã" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 5.2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        CMutableTransaction tx;
        std::string error;
        if (!builder.BuildTransaction(tx, error)) {
            std::cout << "‚ùå –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " << error << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 5.3: –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π
        if (!builder.SignTransaction(tx, error)) {
            std::cout << "‚ùå –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " << error << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 5.4: –ü—Ä–æ–≤–µ—Ä–∫–∞ witness
        if (tx.vin[0].scriptWitness.stack.size() != 4) {
            std::cout << "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ witness: " << tx.vin[0].scriptWitness.stack.size() << " —ç–ª–µ–º–µ–Ω—Ç–æ–≤" << std::endl;
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤—Ö–æ–¥—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π witness (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        for (size_t i = 1; i < tx.vin.size(); ++i) {
            if (tx.vin[i].scriptWitness.stack != tx.vin[0].scriptWitness.stack) {
                std::cout << "‚ùå Witness –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –º–µ–∂–¥—É –≤—Ö–æ–¥–∞–º–∏" << std::endl;
                return false;
            }
        }
        
        // –¢–µ—Å—Ç 5.5: –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö witness
        size_t witness_size = 0;
        for (const auto& element : tx.vin[0].scriptWitness.stack) {
            witness_size += element.size();
        }
        
        std::cout << "‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: " << tx.vin.size() 
                  << " –≤—Ö–æ–¥–æ–≤, witness size: " << witness_size << " bytes" << std::endl;
        
        return true;
    }
    
    bool TestTransactionValidation() {
        std::cout << "\nüîß Test 6: –ë–æ–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π..." << std::endl;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        CQuantumTransactionBuilder builder;
        
        for (size_t i = 0; i < 2; ++i) {
            COutPoint outpoint;
            uint256 txid_raw;
            GetStrongRandBytes(std::span<unsigned char>(txid_raw.begin(), 32));
            outpoint.hash = Txid::FromUint256(txid_raw);
            outpoint.n = i;
            builder.AddInput(outpoint, test_keypairs[i], 50000);
        }
        
        builder.AddOutput(test_keypairs[2].GetAddressHash(), 90000);
        
        CMutableTransaction tx;
        std::string error;
        if (!builder.BuildTransaction(tx, error) || !builder.SignTransaction(tx, error)) {
            std::cout << "‚ùå –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " << error << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 6.1: –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (!CQuantumTransactionValidator::ValidateTransaction(CTransaction(tx), error)) {
            std::cout << "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " << error << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 6.2: –í–∞–ª–∏–¥–∞—Ü–∏—è witness
        CQuantumWitness witness;
        if (!witness.FromScriptWitness(tx.vin[0].scriptWitness)) {
            std::cout << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å witness" << std::endl;
            return false;
        }
        
        uint256 tx_hash = tx.GetHash();
        if (!CQuantumTransactionValidator::ValidateQuantumWitness(witness, tx.vin, tx_hash, error)) {
            std::cout << "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è witness: " << error << std::endl;
            return false;
        }
        
        std::cout << "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–µ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏" << std::endl;
        
        return true;
    }
    
    bool TestWalletManager() {
        std::cout << "\nüîß Test 7: –ë–æ–µ–≤–æ–π quantum wallet manager..." << std::endl;
        
        // –¢–µ—Å—Ç 7.1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –≤ –∫–æ—à–µ–ª—å–∫–µ
        for (int i = 0; i < 5; ++i) {
            CQuantumKeyPair keypair = wallet.GenerateNewKeyPair();
            if (!keypair.IsValid()) {
                std::cout << "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ " << i << " –≤ –∫–æ—à–µ–ª—å–∫–µ" << std::endl;
                return false;
            }
        }
        
        // –¢–µ—Å—Ç 7.2: –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–π –ø–æ –∞–¥—Ä–µ—Å—É
        std::vector<uint160> addresses = wallet.GetAllAddresses();
        if (addresses.size() != 5) {
            std::cout << "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ –≤ –∫–æ—à–µ–ª—å–∫–µ: " << addresses.size() << std::endl;
            return false;
        }
        
        const CQuantumKeyPair* found_keypair = wallet.GetKeyPairByAddress(addresses[0]);
        if (!found_keypair || !found_keypair->IsValid()) {
            std::cout << "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á –ø–æ –∞–¥—Ä–µ—Å—É" << std::endl;
            return false;
        }
        
        // –¢–µ—Å—Ç 7.3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
        std::string wallet_file = "test_quantum_wallet.dat";
        if (!wallet.SaveToFile(wallet_file)) {
            std::cout << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫" << std::endl;
            return false;
        }
        
        CQuantumWalletManager wallet2;
        if (!wallet2.LoadFromFile(wallet_file)) {
            std::cout << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—à–µ–ª–µ–∫" << std::endl;
            return false;
        }
        
        if (wallet2.GetKeyPairCount() != wallet.GetKeyPairCount()) {
            std::cout << "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: " 
                      << wallet2.GetKeyPairCount() << " vs " << wallet.GetKeyPairCount() << std::endl;
            return false;
        }
        
        std::cout << "‚úÖ –ë–æ–µ–≤–æ–π –∫–æ—à–µ–ª–µ–∫: " << wallet.GetKeyPairCount() 
                  << " –∫–ª—é—á–µ–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç" << std::endl;
        
        return true;
    }
    
    bool TestPerformanceAndSavings() {
        std::cout << "\nüîß Test 8: –ë–æ–µ–≤–æ–π performance –∏ —ç–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞..." << std::endl;
        
        const size_t test_sizes[] = {2, 5, 10, 20};
        
        std::cout << "–í—Ö–æ–¥–æ–≤\t–ë–µ–∑ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏\t–° –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π\t–≠–∫–æ–Ω–æ–º–∏—è" << std::endl;
        std::cout << "---------------------------------------------------" << std::endl;
        
        for (size_t input_count : test_sizes) {
            // –†–∞–∑–º–µ—Ä –±–µ–∑ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: –∫–∞–∂–¥—ã–π –≤—Ö–æ–¥ –∏–º–µ–µ—Ç —Å–≤–æ—é –ø–æ–¥–ø–∏—Å—å + pubkey
            size_t size_without = input_count * (3309 + 1952); // DILITHIUM_SIGNATURE_SIZE + DILITHIUM_PUBLICKEY_SIZE
            
            // –†–∞–∑–º–µ—Ä —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π: –æ–¥–Ω–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å + –≤—Å–µ pubkeys
            size_t agg_sig_size = 3309; // –†–∞–∑–º–µ—Ä –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
            size_t size_with = agg_sig_size + (input_count * 1952) + 20 * input_count + 4;
            
            double savings = (1.0 - double(size_with) / size_without) * 100.0;
            
            std::cout << input_count << "\t" 
                      << std::fixed << std::setprecision(1) << (size_without / 1024.0) << " KB\t\t"
                      << std::fixed << std::setprecision(1) << (size_with / 1024.0) << " KB\t\t"
                      << std::fixed << std::setprecision(1) << savings << "%" << std::endl;
        }
        
        // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
        auto start_time = std::chrono::high_resolution_clock::now();
        
        std::vector<CQuantumKeyPair> perf_keypairs;
        for (int i = 0; i < 10; ++i) {
            CQuantumKeyPair keypair = CQuantumKeyPair::Generate();
            if (!keypair.IsValid()) {
                std::cout << "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ " << i << " –≤ performance —Ç–µ—Å—Ç–µ" << std::endl;
                return false;
            }
            perf_keypairs.push_back(keypair);
        }
        
        auto end_time = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time);
        
        std::cout << "\n‚úÖ –ë–æ–µ–≤–æ–π Performance: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 10 –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä –∑–∞ " 
                  << duration.count() << " ms (" 
                  << std::fixed << std::setprecision(1) << (duration.count() / 10.0) << " ms –Ω–∞ –∫–ª—é—á)" << std::endl;
        
        // –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–µ–π
        start_time = std::chrono::high_resolution_clock::now();
        uint256 test_hash;
        GetStrongRandBytes(std::span<unsigned char>(test_hash.begin(), 32));
        
        std::vector<std::vector<unsigned char>> signatures;
        for (int i = 0; i < 10; ++i) {
            std::vector<unsigned char> sig;
            if (!perf_keypairs[i].SignDilithium(test_hash, sig)) {
                std::cout << "‚ùå –ü–æ–¥–ø–∏—Å—å " << i << " –≤ performance —Ç–µ—Å—Ç–µ" << std::endl;
                return false;
            }
            signatures.push_back(sig);
        }
        
        end_time = std::chrono::high_resolution_clock::now();
        duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time);
        
        std::cout << "‚úÖ –ë–æ–µ–≤–æ–π Performance: 10 –ø–æ–¥–ø–∏—Å–µ–π –∑–∞ " 
                  << duration.count() << " ms (" 
                  << std::fixed << std::setprecision(1) << (duration.count() / 10.0) << " ms –Ω–∞ –ø–æ–¥–ø–∏—Å—å)" << std::endl;
        
        return true;
    }
};

int main() {
    std::cout << "=== COMPREHENSIVE BATTLE TEST: COMPRESSED QUANTUM KEYS + DILITHIUM AGGREGATION ===" << std::endl;
    std::cout << std::endl;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ECC –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤
    std::cout << "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏..." << std::endl;
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ECC –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ BasicTestingSetup
    class LocalECC {
        bool initialized = false;
    public:
        LocalECC() {
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ sanity check
                if (ECC_InitSanityCheck()) {
                    initialized = true;
                    std::cout << "‚úÖ ECC –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" << std::endl;
                }
            } catch (...) {
                std::cout << "‚ö†Ô∏è ECC –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞" << std::endl;
                initialized = false;
            }
        }
        bool IsReady() const { return initialized; }
    };
    
    LocalECC ecc;
    if (!ecc.IsReady()) {
        std::cout << "‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —è–≤–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ECC..." << std::endl;
    }
    
    try {
        CompressedQuantumKeysTest test;
        
        if (!test.RunFullSystemTest()) {
            std::cout << "\n‚ùå –ë–û–ï–í–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!" << std::endl;
            return 1;
        }
        
        std::cout << "\n‚úÖ COMPRESSED QUANTUM KEYS –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–´ –° DILITHIUM AGGREGATION!" << std::endl;
        std::cout << "‚úÖ –ë–æ–µ–≤–∞—è Production-ready —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!" << std::endl;
        std::cout << "üõ°Ô∏è Quantum-resistant, Bitcoin-compatible, Aggregation-enabled!" << std::endl;
        
        return 0;
        
    } catch (const std::exception& e) {
        std::cout << "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–æ–µ–≤–æ–º —Ç–µ—Å—Ç–µ: " << e.what() << std::endl;
        return 1;
    }
} 