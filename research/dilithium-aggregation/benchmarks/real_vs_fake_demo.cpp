#include "../prototypes/real_dilithium_aggregator.h"
#include "../prototypes/advanced_aggregation.h"
#include <iostream>
#include <iomanip>

/**
 * –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú –§–ê–õ–¨–®–ò–í–û–ô –°–ò–°–¢–ï–ú–´
 * 
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ù–ê–°–¢–û–Ø–©–£–Æ Dilithium –∞–≥—Ä–µ–≥–∞—Ü–∏—é —Å —Ñ–∞–ª—å—à–∏–≤–æ–π ultra-compression
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

void PrintHeader(const std::string& title) {
    std::cout << "\n" << std::string(60, '=') << std::endl;
    std::cout << title << std::endl;
    std::cout << std::string(60, '=') << std::endl;
}

void TestFakeSystemProblems() {
    PrintHeader("üö® –ü–†–û–ë–õ–ï–ú–´ –§–ê–õ–¨–®–ò–í–û–ô –°–ò–°–¢–ï–ú–´");
    
    std::cout << "\n1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ULTRA-COMPRESSION –° –ü–û–î–î–ï–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò..." << std::endl;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–ª—å—à–∏–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    auto fake_system = std::make_unique<AdvancedDilithiumAggregator>();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–ª—å—à–∏–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    auto fake_signatures = GenerateTestSignatures(100, 3309);
    auto fake_pubkeys = GenerateTestPubkeys(100);
    
    std::cout << "‚úÖ –§–∞–ª—å—à–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ '—É—Å–ø–µ—à–Ω–æ' –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–ª–∞ " << fake_signatures.size() 
              << " –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π" << std::endl;
    
    // –ü–æ–ø—ã—Ç–∫–∞ "–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    UltraCompressedSignature fake_compressed;
    fake_compressed.ultra_data.resize(37);
    std::fill(fake_compressed.ultra_data.begin(), fake_compressed.ultra_data.end(), 0xFF);
    
    bool fake_verify = UltraVerify(fake_compressed, fake_signatures, fake_pubkeys);
    std::cout << "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –§–∞–ª—å—à–∏–≤–∞—è '–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è' –≤–µ—Ä–Ω—É–ª–∞: " 
              << (fake_verify ? "true" : "false") << std::endl;
    
    std::cout << "\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:" << std::endl;
    std::cout << "‚Ä¢ GenerateTestSignatures() —Å–æ–∑–¥–∞—ë—Ç –†–ê–ù–î–û–ú–ù–´–ï –ë–ê–ô–¢–´!" << std::endl;
    std::cout << "‚Ä¢ UltraVerify() –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å!" << std::endl;
    std::cout << "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ '—Ä–∞–±–æ—Ç–∞–µ—Ç' —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∞–º–∞ —Å–µ–±—è!" << std::endl;
}

void TestRealDilithiumSystem() {
    PrintHeader("‚úÖ –ù–ê–°–¢–û–Ø–©–ê–Ø DILITHIUM –°–ò–°–¢–ï–ú–ê");
    
    std::cout << "\n2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò DILITHIUM –ü–û–î–ü–ò–°–Ø–ú–ò..." << std::endl;
    
    RealDilithiumAggregation::RealDilithiumAggregator real_system;
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    std::vector<size_t> test_sizes = {2, 5, 10, 25, 50};
    
    std::cout << "\nüìä –†–ï–ê–õ–¨–ù–´–ï BENCHMARKS:" << std::endl;
    std::cout << std::setw(12) << "Signatures" << std::setw(15) << "Keygen(ms)" 
              << std::setw(15) << "Sign(ms)" << std::setw(15) << "Aggregate(ms)" 
              << std::setw(15) << "Verify(ms)" << std::setw(15) << "Compression%" << std::endl;
    std::cout << std::string(87, '-') << std::endl;
    
    for (size_t size : test_sizes) {
        auto benchmark = real_system.RunRealBenchmark(size);
        
        std::cout << std::setw(12) << size 
                  << std::setw(15) << std::fixed << std::setprecision(2) << benchmark.keygen_time_ms
                  << std::setw(15) << benchmark.signing_time_ms
                  << std::setw(15) << benchmark.aggregation_time_ms  
                  << std::setw(15) << benchmark.verification_time_ms
                  << std::setw(14) << benchmark.compression_ratio << "%" << std::endl;
        
        real_system.Clear();
    }
}

void TestSecurityComparison() {
    PrintHeader("üîí –°–†–ê–í–ù–ï–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò");
    
    std::cout << "\n3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò..." << std::endl;
    
    RealDilithiumAggregation::RealDilithiumAggregator real_system;
    
    std::cout << "\n=== –†–ï–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ===" << std::endl;
    bool real_security = real_system.TestSecurityProperties();
    
    std::cout << "\n=== –§–ê–õ–¨–®–ò–í–ê–Ø –°–ò–°–¢–ï–ú–ê ===" << std::endl;
    std::cout << "‚ùå Security functions –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–´!" << std::endl;
    std::cout << "‚ùå TestRogueKeyAttack() - –û–¢–°–£–¢–°–¢–í–£–ï–¢" << std::endl;
    std::cout << "‚ùå TestReplayAttack() - –û–¢–°–£–¢–°–¢–í–£–ï–¢" << std::endl;
    std::cout << "‚ùå ValidateAggregationSecurity() - –û–¢–°–£–¢–°–¢–í–£–ï–¢" << std::endl;
    
    std::cout << "\nüéØ –ò–¢–û–ì –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:" << std::endl;
    std::cout << "–†–µ–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: " << (real_security ? "‚úÖ SECURE" : "‚ùå INSECURE") << std::endl;
    std::cout << "–§–∞–ª—å—à–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: ‚ùå COMPLETELY INSECURE (NO REAL CRYPTO)" << std::endl;
}

void TestMathematicalCorrectness() {
    PrintHeader("üî¢ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¢–ù–û–°–¢–¨");
    
    std::cout << "\n4. –ü–†–û–í–ï–†–ö–ê –ú–ê–¢–ï–ú–ê–¢–ò–ö–ò..." << std::endl;
    
    RealDilithiumAggregation::RealDilithiumAggregator real_system;
    
    std::cout << "\n=== –†–ï–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ===" << std::endl;
    bool real_math = real_system.VerifyDilithiumMath();
    
    std::cout << "\n=== –§–ê–õ–¨–®–ò–í–ê–Ø –°–ò–°–¢–ï–ú–ê ===" << std::endl;
    std::cout << "‚ùå compress_coefficients() - –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞!" << std::endl;
    std::cout << "‚ùå compress_challenges() - –ü—Ä–æ—Å—Ç–æ–π XOR –±–µ–∑ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è!" << std::endl;
    std::cout << "‚ùå UltraCompress() - –ü–æ—Ç–µ—Ä—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ—à–µ—Ç–∫–∏!" << std::endl;
    
    std::cout << "\nüéØ –ò–¢–û–ì –ú–ê–¢–ï–ú–ê–¢–ò–ö–ò:" << std::endl;
    std::cout << "–†–µ–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: " << (real_math ? "‚úÖ MATHEMATICALLY SOUND" : "‚ùå MATH ERROR") << std::endl;
    std::cout << "–§–∞–ª—å—à–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: ‚ùå MATHEMATICALLY INCORRECT" << std::endl;
}

void PrintRecommendations() {
    PrintHeader("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ");
    
    std::cout << "\nüöÄ –°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:" << std::endl;
    std::cout << "1. ‚ùå –£–î–ê–õ–ò–¢–¨ —Ñ–∞–ª—å—à–∏–≤—É—é ultra-compression —Å–∏—Å—Ç–µ–º—É" << std::endl;
    std::cout << "2. ‚úÖ –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–π QBTC Dilithium –∫–æ–¥" << std::endl;
    std::cout << "3. ‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–¢–¨ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ security —Ñ—É–Ω–∫—Ü–∏–∏" << std::endl;
    std::cout << "4. ‚úÖ –ü–ï–†–ï–ü–ò–°–ê–¢–¨ –∞–≥—Ä–µ–≥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏" << std::endl;
    
    std::cout << "\nüìù –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:" << std::endl;
    std::cout << "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å src/dilithium/ –≤–º–µ—Å—Ç–æ –ø–æ–¥–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞" << std::endl;
    std::cout << "‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å CDilithiumAggregator::AddSignature()" << std::endl;
    std::cout << "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ security —Ç–µ—Å—Ç—ã" << std::endl;
    std::cout << "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é" << std::endl;
    
    std::cout << "\n‚ö†Ô∏è –ß–ï–°–¢–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:" << std::endl;
    std::cout << "‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –±—É–¥–µ—Ç –ú–ï–î–õ–ï–ù–ù–ï–ï —Ñ–∞–ª—å—à–∏–≤–æ–π" << std::endl;
    std::cout << "‚Ä¢ –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –±—É–¥–µ—Ç –ú–ï–ù–¨–®–ï —á–µ–º 99.999%" << std::endl;
    std::cout << "‚Ä¢ –ù–û —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò –ö–û–†–†–ï–ö–¢–ù–û–ô!" << std::endl;
}

void ComparePerformanceRealistic() {
    PrintHeader("‚ö° –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò");
    
    std::cout << "\nüîç –ß–ï–°–¢–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:" << std::endl;
    
    std::cout << "\n=== –§–ê–õ–¨–®–ò–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===" << std::endl;
    std::cout << "–ö–æ–º–ø—Ä–µ—Å—Å–∏—è: 99.999% ‚ùå (–° –†–ê–ù–î–û–ú–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò)" << std::endl;
    std::cout << "–ê–≥—Ä–µ–≥–∞—Ü–∏—è: 0.1ms ‚ùå (–ë–ï–ó –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ò)" << std::endl;
    std::cout << "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: 0.001ms ‚ùå (–ü–†–û–í–ï–†–ö–ê –í–û–°–ü–†–û–ò–ó–í–û–î–ò–ú–û–°–¢–ò)" << std::endl;
    std::cout << "TPS: 1,500,000 ‚ùå (–§–ê–ù–¢–ê–ó–ò–Ø)" << std::endl;
    
    std::cout << "\n=== –†–ï–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–û–ñ–ò–î–ê–ï–ú–´–ï) ===" << std::endl;
    std::cout << "–ö–æ–º–ø—Ä–µ—Å—Å–∏—è: ~60-80% ‚úÖ (–†–ï–ê–õ–¨–ù–ê–Ø –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê)" << std::endl;
    std::cout << "–ê–≥—Ä–µ–≥–∞—Ü–∏—è: ~50-100ms ‚úÖ (–ù–ê–°–¢–û–Ø–©–ê–Ø –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–Ø)" << std::endl;
    std::cout << "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ~10-50ms ‚úÖ (–ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê)" << std::endl;
    std::cout << "TPS: ~1000-5000 ‚úÖ (–†–ï–ê–õ–ò–°–¢–ò–ß–ù–û)" << std::endl;
    
    std::cout << "\nüéØ –í–´–í–û–î–´:" << std::endl;
    std::cout << "‚Ä¢ –§–∞–ª—å—à–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—ë—Ç –∏–ª–ª—é–∑–∏—é —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" << std::endl;
    std::cout << "‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –†–ê–ë–û–¢–ê–Æ–©–ï–ô" << std::endl;
    std::cout << "‚Ä¢ –¶–µ–ª—å - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –†–ï–ê–õ–¨–ù–£–Æ —Å–∏—Å—Ç–µ–º—É –¥–æ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π" << std::endl;
}

int main() {
    std::cout << "üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú –§–ê–õ–¨–®–ò–í–û–ô ULTRA-AGGREGATION –°–ò–°–¢–ï–ú–´" << std::endl;
    std::cout << "=============================================================" << std::endl;
    
    try {
        TestFakeSystemProblems();
        TestRealDilithiumSystem();
        TestSecurityComparison();
        TestMathematicalCorrectness();
        ComparePerformanceRealistic();
        PrintRecommendations();
        
        std::cout << "\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:" << std::endl;
        std::cout << "–§–∞–ª—å—à–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ù–ï–í–û–ó–ú–û–ñ–ù–´–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏." << std::endl;
        std::cout << "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –†–ï–ê–õ–¨–ù–£–Æ Dilithium –∞–≥—Ä–µ–≥–∞—Ü–∏—é!" << std::endl;
        
    } catch (const std::exception& e) {
        std::cout << "‚ùå –û—à–∏–±–∫–∞: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
} 