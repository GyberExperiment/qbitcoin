/**
 * –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô DILITHIUM –ê–ì–†–ï–ì–ê–¶–ò–ò –í QBTC
 * 
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ù–ê–°–¢–û–Ø–©–£–Æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é QBTC Dilithium
 * –ë–µ–∑ —Ñ–∞–ª—å—à–∏–≤—ã—Ö research prototypes
 */

#include <iostream>
#include <vector>
#include <chrono>

#include "src/key.h"  // Using the main QBTC key types instead of qkey.h
#include "src/uint256.h"
#include "src/dilithium/aggregation.h"
#include "src/random.h"
#include "src/util/time.h"
#include "src/logging.h"

/**
 * –†–µ–∞–ª—å–Ω—ã–π production —Ç–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
 */
class QBTCProductionAggregationTest {
private:
    std::vector<CQKey> test_keys;
    std::vector<CQPubKey> test_pubkeys;
    std::vector<uint256> test_messages;
    std::vector<std::vector<unsigned char>> test_signatures;
    
public:
    bool InitializeTest(size_t key_count) {
        std::cout << "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production —Ç–µ—Å—Ç–∞ –¥–ª—è " << key_count << " –∫–ª—é—á–µ–π..." << std::endl;
        
        test_keys.clear();
        test_pubkeys.clear();
        test_messages.clear();
        test_signatures.clear();
        
        test_keys.reserve(key_count);
        test_pubkeys.reserve(key_count);
        test_messages.reserve(key_count);
        test_signatures.reserve(key_count);
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ù–ê–°–¢–û–Ø–©–ò–• Dilithium –∫–ª—é—á–µ–π
        for (size_t i = 0; i < key_count; ++i) {
            CQKey key;
            key.MakeNewKey(true);
            
            if (!key.IsValid()) {
                std::cout << "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ " << i << std::endl;
                return false;
            }
            
            CQPubKey pubkey = key.GetPubKey();
            if (!pubkey.IsValid()) {
                std::cout << "‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ " << i << std::endl;
                return false;
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            uint256 message;
            GetStrongRandBytes({(unsigned char*)&message, sizeof(message)});
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
            std::vector<unsigned char> signature;
            if (!key.Sign(message, signature)) {
                std::cout << "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ " << i << std::endl;
                return false;
            }
            
            // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
            if (!pubkey.Verify(message, signature)) {
                std::cout << "‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ " << i << std::endl;
                return false;
            }
            
            test_keys.push_back(std::move(key));
            test_pubkeys.push_back(pubkey);
            test_messages.push_back(message);
            test_signatures.push_back(std::move(signature));
        }
        
        std::cout << "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: " << test_keys.size() << " –∫–ª—é—á–µ–π –≥–æ—Ç–æ–≤–æ" << std::endl;
        return true;
    }
    
    bool TestRealAggregation() {
        std::cout << "\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô DILITHIUM –ê–ì–†–ï–ì–ê–¶–ò–ò..." << std::endl;
        
        if (test_keys.empty()) {
            std::cout << "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ InitializeTest() —Å–Ω–∞—á–∞–ª–∞." << std::endl;
            return false;
        }
        
        CDilithiumAggregator aggregator;
        
        auto start_time = std::chrono::high_resolution_clock::now();
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
        for (size_t i = 0; i < test_signatures.size(); ++i) {
            if (!aggregator.AddSignature(test_pubkeys[i], test_messages[i], test_signatures[i])) {
                std::cout << "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ " << i << " –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä" << std::endl;
                return false;
            }
        }
        
        auto add_time = std::chrono::high_resolution_clock::now();
        
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        CAggregatedSignature agg_sig = aggregator.Aggregate();
        
        auto agg_time = std::chrono::high_resolution_clock::now();
        
        if (!agg_sig.IsValid()) {
            std::cout << "‚ùå –ê–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å" << std::endl;
            return false;
        }
        
        // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
        bool verify_result = CDilithiumAggregator::VerifyAggregated(agg_sig);
        
        auto verify_time = std::chrono::high_resolution_clock::now();
        
        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        auto add_duration = std::chrono::duration_cast<std::chrono::microseconds>(add_time - start_time);
        auto agg_duration = std::chrono::duration_cast<std::chrono::microseconds>(agg_time - add_time);
        auto verify_duration = std::chrono::duration_cast<std::chrono::microseconds>(verify_time - agg_time);
        
        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        size_t original_size = test_signatures.size() * DILITHIUM_SIGNATURE_SIZE;
        size_t aggregated_size = agg_sig.GetSerializeSize();
        double compression_ratio = (1.0 - double(aggregated_size) / original_size) * 100.0;
        
        std::cout << "\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–ê–õ–¨–ù–û–ô –ê–ì–†–ï–ì–ê–¶–ò–ò:" << std::endl;
        std::cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–µ–π: " << test_signatures.size() << std::endl;
        std::cout << "–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: " << add_duration.count() / 1000.0 << " ms" << std::endl;
        std::cout << "–í—Ä–µ–º—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: " << agg_duration.count() / 1000.0 << " ms" << std::endl;
        std::cout << "–í—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: " << verify_duration.count() / 1000.0 << " ms" << std::endl;
        std::cout << "–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: " << original_size << " bytes" << std::endl;
        std::cout << "–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: " << aggregated_size << " bytes" << std::endl;
        std::cout << "üéØ –†–ï–ê–õ–¨–ù–ê–Ø –ö–û–ú–ü–†–ï–°–°–ò–Ø: " << compression_ratio << "%" << std::endl;
        std::cout << "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: " << (verify_result ? "‚úÖ –£–°–ü–ï–®–ù–û" : "‚ùå –ü–†–û–í–ê–õ–ï–ù–û") << std::endl;
        
        return verify_result;
    }
    
    bool TestSpaceSavings() {
        std::cout << "\nüíæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ö–û–ù–û–ú–ò–ò –ú–ï–°–¢–ê..." << std::endl;
        
        std::vector<size_t> test_sizes = {2, 5, 10, 25, 50, 100};
        
        std::cout << "–°–∏–≥–Ω–∞—Ç—É—Ä—ã\t–û—Ä–∏–≥–∏–Ω–∞–ª (KB)\t–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (KB)\t–ö–æ–º–ø—Ä–µ—Å—Å–∏—è %" << std::endl;
        std::cout << "----------------------------------------------------------------" << std::endl;
        
        for (size_t size : test_sizes) {
            size_t original_kb = (size * DILITHIUM_SIGNATURE_SIZE) / 1024;
            size_t savings = CDilithiumAggregator::CalculateSpaceSavings(size);
            size_t agg_kb = ((size * DILITHIUM_SIGNATURE_SIZE) - savings) / 1024;
            double compression = (double(savings) / (size * DILITHIUM_SIGNATURE_SIZE)) * 100.0;
            
            std::cout << size << "\t\t" << original_kb << "\t\t" 
                      << agg_kb << "\t\t\t" << compression << "%" << std::endl;
        }
        
        return true;
    }
    
    bool TestBatchVerification() {
        std::cout << "\n‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BATCH –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò..." << std::endl;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π
        std::vector<CAggregatedSignature> batch_sigs;
        const size_t batch_count = 3;
        const size_t sigs_per_batch = 5;
        
        for (size_t batch = 0; batch < batch_count; ++batch) {
            if (!InitializeTest(sigs_per_batch)) {
                return false;
            }
            
            CDilithiumAggregator aggregator;
            
            for (size_t i = 0; i < test_signatures.size(); ++i) {
                if (!aggregator.AddSignature(test_pubkeys[i], test_messages[i], test_signatures[i])) {
                    return false;
                }
            }
            
            CAggregatedSignature agg_sig = aggregator.Aggregate();
            if (!agg_sig.IsValid()) {
                return false;
            }
            
            batch_sigs.push_back(agg_sig);
        }
        
        auto start_time = std::chrono::high_resolution_clock::now();
        
        bool batch_result = CDilithiumAggregator::VerifyBatch(batch_sigs);
        
        auto end_time = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);
        
        std::cout << "Batch –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è " << batch_count << " –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π: " 
                  << (batch_result ? "‚úÖ –£–°–ü–ï–®–ù–û" : "‚ùå –ü–†–û–í–ê–õ–ï–ù–û") << std::endl;
        std::cout << "–í—Ä–µ–º—è batch –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: " << duration.count() / 1000.0 << " ms" << std::endl;
        
        return batch_result;
    }
};

int main() {
    std::cout << "üîê QBTC PRODUCTION DILITHIUM AGGREGATION TEST" << std::endl;
    std::cout << "=============================================" << std::endl;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QBTC —Å–∏—Å—Ç–µ–º—ã
    LogPrintf("QBTC Production Aggregation Test Started\n");
    
    QBTCProductionAggregationTest test;
    
    try {
        // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
        std::cout << "\n=== –¢–ï–°–¢ 1: –ë–ê–ó–û–í–ê–Ø –ê–ì–†–ï–ì–ê–¶–ò–Ø ===" << std::endl;
        if (!test.InitializeTest(10)) {
            std::cout << "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞" << std::endl;
            return 1;
        }
        
        if (!test.TestRealAggregation()) {
            std::cout << "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏" << std::endl;
            return 1;
        }
        
        // –¢–µ—Å—Ç 2: –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞
        std::cout << "\n=== –¢–ï–°–¢ 2: –≠–ö–û–ù–û–ú–ò–Ø –ú–ï–°–¢–ê ===" << std::endl;
        if (!test.TestSpaceSavings()) {
            std::cout << "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞" << std::endl;
            return 1;
        }
        
        // –¢–µ—Å—Ç 3: Batch –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        std::cout << "\n=== –¢–ï–°–¢ 3: BATCH –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø ===" << std::endl;
        if (!test.TestBatchVerification()) {
            std::cout << "‚ùå –û—à–∏–±–∫–∞ batch –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏" << std::endl;
            return 1;
        }
        
        std::cout << "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!" << std::endl;
        std::cout << "QBTC Dilithium –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ production —Å—Ä–µ–¥–µ!" << std::endl;
        
        return 0;
        
    } catch (const std::exception& e) {
        std::cout << "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " << e.what() << std::endl;
        return 1;
    }
} 